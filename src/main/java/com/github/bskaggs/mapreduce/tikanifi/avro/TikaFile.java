/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.github.bskaggs.mapreduce.tikanifi.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TikaFile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TikaFile\",\"namespace\":\"com.github.bskaggs.mapreduce.tikanifi.avro\",\"fields\":[{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"resources\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> attributes;
  @Deprecated public java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> resources;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public TikaFile() {}

  /**
   * All-args constructor.
   */
  public TikaFile(java.util.Map<java.lang.String,java.lang.String> attributes, java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> resources) {
    this.attributes = attributes;
    this.resources = resources;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return attributes;
    case 1: return resources;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: attributes = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 1: resources = (java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'attributes' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.String,java.lang.String> value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'resources' field.
   */
  public java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> getResources() {
    return resources;
  }

  /**
   * Sets the value of the 'resources' field.
   * @param value the value to set.
   */
  public void setResources(java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> value) {
    this.resources = value;
  }

  /** Creates a new TikaFile RecordBuilder */
  public static com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder newBuilder() {
    return new com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder();
  }
  
  /** Creates a new TikaFile RecordBuilder by copying an existing Builder */
  public static com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder newBuilder(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder other) {
    return new com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder(other);
  }
  
  /** Creates a new TikaFile RecordBuilder by copying an existing TikaFile instance */
  public static com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder newBuilder(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile other) {
    return new com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder(other);
  }
  
  /**
   * RecordBuilder for TikaFile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TikaFile>
    implements org.apache.avro.data.RecordBuilder<TikaFile> {

    private java.util.Map<java.lang.String,java.lang.String> attributes;
    private java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> resources;

    /** Creates a new Builder */
    private Builder() {
      super(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.attributes)) {
        this.attributes = data().deepCopy(fields()[0].schema(), other.attributes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resources)) {
        this.resources = data().deepCopy(fields()[1].schema(), other.resources);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TikaFile instance */
    private Builder(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile other) {
            super(com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.SCHEMA$);
      if (isValidValue(fields()[0], other.attributes)) {
        this.attributes = data().deepCopy(fields()[0].schema(), other.attributes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resources)) {
        this.resources = data().deepCopy(fields()[1].schema(), other.resources);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.String,java.lang.String> getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder setAttributes(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[0], value);
      this.attributes = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'attributes' field */
    public com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'resources' field */
    public java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> getResources() {
      return resources;
    }
    
    /** Sets the value of the 'resources' field */
    public com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder setResources(java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>> value) {
      validate(fields()[1], value);
      this.resources = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'resources' field has been set */
    public boolean hasResources() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'resources' field */
    public com.github.bskaggs.mapreduce.tikanifi.avro.TikaFile.Builder clearResources() {
      resources = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TikaFile build() {
      try {
        TikaFile record = new TikaFile();
        record.attributes = fieldSetFlags()[0] ? this.attributes : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[0]);
        record.resources = fieldSetFlags()[1] ? this.resources : (java.util.List<java.util.Map<java.lang.String,java.util.List<java.lang.String>>>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
